import re
import logging
from typing import List, Dict, Any

logger = logging.getLogger("ragnetic")

CITATION_PATTERN = re.compile(r'(?<!\w)\[(\d+)\](?!\w)')


def extract_citations_from_text(
        llm_response_text: str,
        source_map: Dict[int, Dict[str, Any]]
) -> List[Dict[str, Any]]:
    """
    Finds numbered citation markers and maps them back to their source chunk
    metadata using the provided source_map.

    Args:
        llm_response_text: The raw text generated by the LLM.
        source_map: A dictionary mapping the citation number to the chunk's metadata.
                    Example: {1: {'chunk_id': 123, 'doc_name': 'doc.pdf', 'chunk_content': '...text...'}}

    Returns:
        A list of dictionaries, each representing a found and successfully mapped citation.
        The returned dictionary now includes the 'snippet' field.
    """
    citations_found = []
    processed_marker_instances = set()

    for match in CITATION_PATTERN.finditer(llm_response_text):
        marker_number = int(match.group(1))
        start_char, end_char = match.span()
        marker_instance_key = f"{marker_number}-{start_char}"

        if marker_instance_key in processed_marker_instances:
            continue
        processed_marker_instances.add(marker_instance_key)

        source_meta = source_map.get(marker_number)

        if source_meta:
            citations_found.append({
                "marker_text": match.group(0),
                "doc_name": source_meta.get("doc_name"),
                "chunk_id": source_meta.get("chunk_id"),
                "snippet": source_meta.get("chunk_content", "Snippet not available."),
                "start_char": start_char,
                "end_char": end_char
            })
        else:
            logger.warning(f"Could not map citation marker '{match.group(0)}' to any source in the provided context.")
            # For robustness, you can also add a placeholder for hallucinated citations
            citations_found.append({
                "marker_text": match.group(0),
                "doc_name": "Source not found.",
                "chunk_id": -1,
                "snippet": "Snippet not available.",
                "start_char": start_char,
                "end_char": end_char
            })

    return citations_found