import re
import logging
from typing import List, Dict, Any

logger = logging.getLogger(__name__)

CITATION_PATTERN = re.compile(r'(?<!\w)\[(\d+)\](?!\w)')


def extract_citations_from_text(
        llm_response_text: str,
        source_map: Dict[int, Dict[str, Any]]
) -> List[Dict[str, Any]]:
    """
    Finds numbered citation markers and maps them back to their source chunk
    metadata using the provided source_map.

    Args:
        llm_response_text: The raw text generated by the LLM.
        source_map: A dictionary mapping the citation number to the chunk's metadata.
                    Example: {1: {'chunk_id': 123, 'doc_name': 'doc.pdf'}}

    Returns:
        A list of dictionaries, each representing a found and successfully mapped citation.
    """
    citations_found = []
    # Use a set to process each unique marker *instance* only once, preventing duplicates
    # if the same citation appears multiple times in the text.
    processed_marker_instances = set()

    for match in CITATION_PATTERN.finditer(llm_response_text):
        # The citation number, e.g., '1' from '[1]'
        marker_number = int(match.group(1))

        # Unique identifier for this specific occurrence of the marker in the text
        start_char, end_char = match.span()
        marker_instance_key = f"{marker_number}-{start_char}"

        if marker_instance_key in processed_marker_instances:
            continue
        processed_marker_instances.add(marker_instance_key)

        # Look up the source metadata using the number from the citation
        source_meta = source_map.get(marker_number)

        if source_meta:
            citations_found.append({
                "marker_text": match.group(0),  # The full "[1]" text
                "doc_name": source_meta.get("doc_name"),
                "chunk_id": source_meta.get("chunk_id"),
                "start_char": start_char,
                "end_char": end_char
            })
        else:
            # This warning is helpful for debugging if the LLM hallucinates a source number
            logger.warning(f"Could not map citation marker '{match.group(0)}' to any source in the provided context.")

    return citations_found