import sqlalchemy as sa
from alembic import op
from datetime import datetime # Make sure this import is at the top of your migration file
from typing import Sequence, Union # Keep existing imports

# revision identifiers, used by Alembic.
revision: str = 'cc04fb10636c'
down_revision: Union[str, Sequence[str], None] = '4a434f93de52'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    # Use op.execute(sa.text("DROP TABLE IF EXISTS ...")) for robustness
    op.execute(sa.text("DROP TABLE IF EXISTS celery_solarschedule"))
    op.execute(sa.text("DROP TABLE IF EXISTS celery_crontabschedule"))
    op.execute(sa.text("DROP TABLE IF EXISTS celery_clockedschedule"))
    op.execute(sa.text("DROP TABLE IF EXISTS celery_intervalschedule"))
    op.execute(sa.text("DROP TABLE IF EXISTS celery_periodictask"))
    op.execute(sa.text("DROP TABLE IF EXISTS celery_periodictaskchanged"))

    with op.batch_alter_table('users', schema=None) as batch_op:
        # Add hashed_password column
        batch_op.add_column(sa.Column('hashed_password', sa.String(length=255), nullable=True))
    # Update existing rows with a temporary default value (e.g., empty string or a placeholder hash)
    op.execute("UPDATE users SET hashed_password = '' WHERE hashed_password IS NULL")
    # Then alter the column to be NOT NULL
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('hashed_password', existing_type=sa.String(length=255), nullable=False)


    with op.batch_alter_table('users', schema=None) as batch_op:
        # Add is_active column
        batch_op.add_column(sa.Column('is_active', sa.Boolean(), nullable=True))
    # Set default value for existing rows
    op.execute("UPDATE users SET is_active = TRUE WHERE is_active IS NULL")
    # Then alter the column to be NOT NULL
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('is_active', existing_type=sa.Boolean(), nullable=False)


    with op.batch_alter_table('users', schema=None) as batch_op:
        # Add is_superuser column
        batch_op.add_column(sa.Column('is_superuser', sa.Boolean(), nullable=True))
    # Set default value for existing rows
    op.execute("UPDATE users SET is_superuser = FALSE WHERE is_superuser IS NULL")
    # Then alter the column to be NOT NULL
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.alter_column('is_superuser', existing_type=sa.Boolean(), nullable=False)

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_column('is_superuser')
        batch_op.drop_column('is_active')
        batch_op.drop_column('hashed_password')

    # The auto-generated downgrade commands for celery tables are fine as they are.
    op.create_table('celery_periodictaskchanged',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('last_update', sa.DATETIME(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('celery_periodictask',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=False),
    sa.Column('task', sa.VARCHAR(length=255), nullable=False),
    sa.Column('args', sa.TEXT(), nullable=False),
    sa.Column('kwargs', sa.TEXT(), nullable=False),
    sa.Column('queue', sa.VARCHAR(length=255), nullable=True),
    sa.Column('exchange', sa.VARCHAR(length=255), nullable=True),
    sa.Column('routing_key', sa.VARCHAR(length=255), nullable=True),
    sa.Column('headers', sa.TEXT(), nullable=True),
    sa.Column('priority', sa.INTEGER(), nullable=True),
    sa.Column('expires', sa.DATETIME(), nullable=True),
    sa.Column('expire_seconds', sa.INTEGER(), nullable=True),
    sa.Column('one_off', sa.BOOLEAN(), nullable=False),
    sa.Column('start_time', sa.DATETIME(), nullable=True),
    sa.Column('enabled', sa.BOOLEAN(), nullable=False),
    sa.Column('last_run_at', sa.DATETIME(), nullable=True),
    sa.Column('total_run_count', sa.INTEGER(), nullable=False),
    sa.Column('date_changed', sa.DATETIME(), nullable=True),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('discriminator', sa.VARCHAR(length=20), nullable=False),
    sa.Column('schedule_id', sa.INTEGER(), nullable=False),
    sa.CheckConstraint('priority BETWEEN 0 AND 255'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('celery_intervalschedule',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('every', sa.INTEGER(), nullable=False),
    sa.Column('period', sa.VARCHAR(length=12), nullable=False),
    sa.CheckConstraint('every >= 1'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('celery_clockedschedule',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('clocked_time', sa.DATETIME(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('celery_crontabschedule',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('minute', sa.VARCHAR(length=240), nullable=False),
    sa.Column('hour', sa.VARCHAR(length=96), nullable=False),
    sa.Column('day_of_week', sa.VARCHAR(length=64), nullable=False),
    sa.Column('day_of_month', sa.VARCHAR(length=124), nullable=False),
    sa.Column('month_of_year', sa.VARCHAR(length=64), nullable=False),
    sa.Column('timezone', sa.VARCHAR(length=64), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('celery_solarschedule',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('event', sa.VARCHAR(length=17), nullable=False),
    sa.Column('latitude', sa.NUMERIC(precision=9, scale=6), nullable=False),
    sa.Column('longitude', sa.NUMERIC(precision=9, scale=6), nullable=False),
    sa.CheckConstraint('latitude BETWEEN -90 AND 90'),
    sa.CheckConstraint('longitude BETWEEN -180 AND 180'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('event', 'latitude', 'longitude')
    )
    # ### end Alembic commands ###