"""Add thread_id FK to Lambda Run Table

Revision ID: f710ce3bcd0f
Revises: 02a4537033ed
Create Date: 2025-08-18 03:24:21.691690

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'f710ce3bcd0f'
down_revision: Union[str, Sequence[str], None] = '02a4537033ed'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('celery_crontabschedule')
    op.drop_table('celery_intervalschedule')
    op.drop_table('celery_periodictaskchanged')
    op.drop_table('celery_clockedschedule')
    op.drop_table('celery_solarschedule')
    op.drop_table('celery_periodictask')
    with op.batch_alter_table('lambda_runs', schema=None) as batch_op:
        batch_op.add_column(sa.Column('thread_id', sa.String(length=255), nullable=True))
        batch_op.create_index(batch_op.f('ix_lambda_runs_thread_id'), ['thread_id'], unique=False)
        batch_op.create_foreign_key(batch_op.f('fk_lambda_runs_thread_id_chat_sessions'), 'chat_sessions', ['thread_id'], ['thread_id'], ondelete='CASCADE')

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('lambda_runs', schema=None) as batch_op:
        batch_op.drop_constraint(batch_op.f('fk_lambda_runs_thread_id_chat_sessions'), type_='foreignkey')
        batch_op.drop_index(batch_op.f('ix_lambda_runs_thread_id'))
        batch_op.drop_column('thread_id')

    op.create_table('celery_periodictask',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=False),
    sa.Column('task', sa.VARCHAR(length=255), nullable=False),
    sa.Column('args', sa.TEXT(), nullable=False),
    sa.Column('kwargs', sa.TEXT(), nullable=False),
    sa.Column('queue', sa.VARCHAR(length=255), nullable=True),
    sa.Column('exchange', sa.VARCHAR(length=255), nullable=True),
    sa.Column('routing_key', sa.VARCHAR(length=255), nullable=True),
    sa.Column('headers', sa.TEXT(), nullable=True),
    sa.Column('priority', sa.INTEGER(), nullable=True),
    sa.Column('expires', sa.DATETIME(), nullable=True),
    sa.Column('expire_seconds', sa.INTEGER(), nullable=True),
    sa.Column('one_off', sa.BOOLEAN(), nullable=False),
    sa.Column('start_time', sa.DATETIME(), nullable=True),
    sa.Column('enabled', sa.BOOLEAN(), nullable=False),
    sa.Column('last_run_at', sa.DATETIME(), nullable=True),
    sa.Column('total_run_count', sa.INTEGER(), nullable=False),
    sa.Column('date_changed', sa.DATETIME(), nullable=True),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('discriminator', sa.VARCHAR(length=20), nullable=False),
    sa.Column('schedule_id', sa.INTEGER(), nullable=False),
    sa.CheckConstraint('priority BETWEEN 0 AND 255'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('celery_solarschedule',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('event', sa.VARCHAR(length=17), nullable=False),
    sa.Column('latitude', sa.NUMERIC(precision=9, scale=6), nullable=False),
    sa.Column('longitude', sa.NUMERIC(precision=9, scale=6), nullable=False),
    sa.CheckConstraint('latitude BETWEEN -90 AND 90'),
    sa.CheckConstraint('longitude BETWEEN -180 AND 180'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('event', 'latitude', 'longitude')
    )
    op.create_table('celery_clockedschedule',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('clocked_time', sa.DATETIME(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('celery_periodictaskchanged',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('last_update', sa.DATETIME(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('celery_intervalschedule',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('every', sa.INTEGER(), nullable=False),
    sa.Column('period', sa.VARCHAR(length=12), nullable=False),
    sa.CheckConstraint('every >= 1'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('celery_crontabschedule',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('minute', sa.VARCHAR(length=240), nullable=False),
    sa.Column('hour', sa.VARCHAR(length=96), nullable=False),
    sa.Column('day_of_week', sa.VARCHAR(length=64), nullable=False),
    sa.Column('day_of_month', sa.VARCHAR(length=124), nullable=False),
    sa.Column('month_of_year', sa.VARCHAR(length=64), nullable=False),
    sa.Column('timezone', sa.VARCHAR(length=64), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
