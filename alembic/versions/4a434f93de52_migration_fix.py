"""Migration Fix

Revision ID: 4a434f93de52
Revises: 7a3817fb116e
Create Date: 2025-07-25 16:31:22.257116

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '4a434f93de52'
down_revision: Union[str, Sequence[str], None] = '7a3817fb116e'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('crontab_schedule',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('minute', sa.String(length=64), nullable=True),
    sa.Column('hour', sa.String(length=64), nullable=True),
    sa.Column('day_of_week', sa.String(length=64), nullable=True),
    sa.Column('day_of_month', sa.String(length=64), nullable=True),
    sa.Column('month_of_year', sa.String(length=64), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('interval_schedule',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('every', sa.Integer(), nullable=False),
    sa.Column('period', sa.String(length=24), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('organizations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('organizations', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_organizations_name'), ['name'], unique=True)

    op.create_table('periodic_task_changed',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('last_update', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('roles',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_roles_name'), ['name'], unique=True)

    op.create_table('workflows',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('agent_name', sa.String(length=255), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('definition', sa.JSON(), nullable=False),
    sa.Column('last_run_at', sa.DateTime(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('workflows', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_workflows_name'), ['name'], unique=True)

    op.create_table('periodic_task',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=255), nullable=True),
    sa.Column('task', sa.String(length=255), nullable=True),
    sa.Column('interval_id', sa.Integer(), nullable=True),
    sa.Column('crontab_id', sa.Integer(), nullable=True),
    sa.Column('args', sa.Text(), nullable=True),
    sa.Column('kwargs', sa.Text(), nullable=True),
    sa.Column('queue', sa.String(length=255), nullable=True),
    sa.Column('exchange', sa.String(length=255), nullable=True),
    sa.Column('routing_key', sa.String(length=255), nullable=True),
    sa.Column('expires', sa.DateTime(), nullable=True),
    sa.Column('enabled', sa.Boolean(), nullable=True),
    sa.Column('last_run_at', sa.DateTime(), nullable=True),
    sa.Column('total_run_count', sa.Integer(), nullable=True),
    sa.Column('date_changed', sa.DateTime(), nullable=True),
    sa.Column('description', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['crontab_id'], ['crontab_schedule.id'], ),
    sa.ForeignKeyConstraint(['interval_id'], ['interval_schedule.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('role_permissions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('permission', sa.String(length=255), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('role_id', 'permission', name='uq_role_permission')
    )
    op.create_table('user_organizations',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('organization_id', sa.Integer(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('user_id', 'organization_id', name='uq_user_organization')
    )
    op.create_table('workflow_runs',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('run_id', sa.String(length=255), nullable=False),
    sa.Column('workflow_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('running', 'completed', 'failed', 'paused', name='workflow_status_enum'), nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=True),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('initial_input', sa.JSON(), nullable=True),
    sa.Column('final_output', sa.JSON(), nullable=True),
    sa.Column('last_execution_state', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['workflow_id'], ['workflows.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('workflow_runs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_workflow_runs_run_id'), ['run_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_workflow_runs_user_id'), ['user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_workflow_runs_workflow_id'), ['workflow_id'], unique=False)
        batch_op.create_index('workflow_runs_user_idx', ['user_id'], unique=False)
        batch_op.create_index('workflow_runs_workflow_idx', ['workflow_id'], unique=False)

    op.create_table('agent_runs',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('run_id', sa.String(length=255), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('status', sa.Enum('running', 'completed', 'failed', name='agent_status_enum'), nullable=False),
    sa.Column('initial_messages', sa.JSON(), nullable=True),
    sa.Column('final_state', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['chat_sessions.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('agent_runs', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_agent_runs_run_id'), ['run_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_agent_runs_session_id'), ['session_id'], unique=False)

    op.create_table('human_tasks',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('run_id', sa.Integer(), nullable=False),
    sa.Column('task_name', sa.String(length=255), nullable=False),
    sa.Column('status', sa.String(length=50), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.Column('assigned_to_user_id', sa.Integer(), nullable=True),
    sa.Column('payload', sa.JSON(), nullable=True),
    sa.Column('resolution_data', sa.JSON(), nullable=True),
    sa.ForeignKeyConstraint(['assigned_to_user_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['run_id'], ['workflow_runs.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('human_tasks', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_human_tasks_run_id'), ['run_id'], unique=False)

    op.create_table('agent_run_steps',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('agent_run_id', sa.Integer(), nullable=False),
    sa.Column('node_name', sa.String(length=255), nullable=False),
    sa.Column('start_time', sa.DateTime(), nullable=False),
    sa.Column('end_time', sa.DateTime(), nullable=True),
    sa.Column('inputs', sa.JSON(), nullable=True),
    sa.Column('outputs', sa.JSON(), nullable=True),
    sa.Column('status', sa.Enum('running', 'completed', 'failed', name='agent_status_enum'), nullable=False),
    sa.ForeignKeyConstraint(['agent_run_id'], ['agent_runs.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('agent_run_steps', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_agent_run_steps_agent_run_id'), ['agent_run_id'], unique=False)

    op.drop_table('celery_crontabschedule')
    op.drop_table('celery_intervalschedule')
    op.drop_table('celery_clockedschedule')
    op.drop_table('celery_periodictask')
    op.drop_table('celery_periodictaskchanged')
    op.drop_table('celery_solarschedule')
    with op.batch_alter_table('ragnetic_logs', schema=None) as batch_op:
        batch_op.add_column(sa.Column('details', sa.JSON(), nullable=True))

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('ragnetic_logs', schema=None) as batch_op:
        batch_op.drop_column('details')

    op.create_table('celery_solarschedule',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('event', sa.VARCHAR(length=17), nullable=False),
    sa.Column('latitude', sa.NUMERIC(precision=9, scale=6), nullable=False),
    sa.Column('longitude', sa.NUMERIC(precision=9, scale=6), nullable=False),
    sa.CheckConstraint('latitude BETWEEN -90 AND 90'),
    sa.CheckConstraint('longitude BETWEEN -180 AND 180'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('event', 'latitude', 'longitude')
    )
    op.create_table('celery_periodictaskchanged',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('last_update', sa.DATETIME(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('celery_periodictask',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=False),
    sa.Column('task', sa.VARCHAR(length=255), nullable=False),
    sa.Column('args', sa.TEXT(), nullable=False),
    sa.Column('kwargs', sa.TEXT(), nullable=False),
    sa.Column('queue', sa.VARCHAR(length=255), nullable=True),
    sa.Column('exchange', sa.VARCHAR(length=255), nullable=True),
    sa.Column('routing_key', sa.VARCHAR(length=255), nullable=True),
    sa.Column('headers', sa.TEXT(), nullable=True),
    sa.Column('priority', sa.INTEGER(), nullable=True),
    sa.Column('expires', sa.DATETIME(), nullable=True),
    sa.Column('expire_seconds', sa.INTEGER(), nullable=True),
    sa.Column('one_off', sa.BOOLEAN(), nullable=False),
    sa.Column('start_time', sa.DATETIME(), nullable=True),
    sa.Column('enabled', sa.BOOLEAN(), nullable=False),
    sa.Column('last_run_at', sa.DATETIME(), nullable=True),
    sa.Column('total_run_count', sa.INTEGER(), nullable=False),
    sa.Column('date_changed', sa.DATETIME(), nullable=True),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('discriminator', sa.VARCHAR(length=20), nullable=False),
    sa.Column('schedule_id', sa.INTEGER(), nullable=False),
    sa.CheckConstraint('priority BETWEEN 0 AND 255'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('celery_clockedschedule',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('clocked_time', sa.DATETIME(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('celery_intervalschedule',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('every', sa.INTEGER(), nullable=False),
    sa.Column('period', sa.VARCHAR(length=12), nullable=False),
    sa.CheckConstraint('every >= 1'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('celery_crontabschedule',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('minute', sa.VARCHAR(length=240), nullable=False),
    sa.Column('hour', sa.VARCHAR(length=96), nullable=False),
    sa.Column('day_of_week', sa.VARCHAR(length=64), nullable=False),
    sa.Column('day_of_month', sa.VARCHAR(length=124), nullable=False),
    sa.Column('month_of_year', sa.VARCHAR(length=64), nullable=False),
    sa.Column('timezone', sa.VARCHAR(length=64), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('agent_run_steps', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_agent_run_steps_agent_run_id'))

    op.drop_table('agent_run_steps')
    with op.batch_alter_table('human_tasks', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_human_tasks_run_id'))

    op.drop_table('human_tasks')
    with op.batch_alter_table('agent_runs', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_agent_runs_session_id'))
        batch_op.drop_index(batch_op.f('ix_agent_runs_run_id'))

    op.drop_table('agent_runs')
    with op.batch_alter_table('workflow_runs', schema=None) as batch_op:
        batch_op.drop_index('workflow_runs_workflow_idx')
        batch_op.drop_index('workflow_runs_user_idx')
        batch_op.drop_index(batch_op.f('ix_workflow_runs_workflow_id'))
        batch_op.drop_index(batch_op.f('ix_workflow_runs_user_id'))
        batch_op.drop_index(batch_op.f('ix_workflow_runs_run_id'))

    op.drop_table('workflow_runs')
    op.drop_table('user_organizations')
    op.drop_table('role_permissions')
    op.drop_table('periodic_task')
    with op.batch_alter_table('workflows', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_workflows_name'))

    op.drop_table('workflows')
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_roles_name'))

    op.drop_table('roles')
    op.drop_table('periodic_task_changed')
    with op.batch_alter_table('organizations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_organizations_name'))

    op.drop_table('organizations')
    op.drop_table('interval_schedule')
    op.drop_table('crontab_schedule')
    # ### end Alembic commands ###
