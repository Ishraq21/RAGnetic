"""Migration for Fune Tuning Models

Revision ID: 7388d15f7764
Revises: 75f2636c52ea
Create Date: 2025-07-28 20:54:53.737258

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = '7388d15f7764'
down_revision: Union[str, Sequence[str], None] = '75f2636c52ea'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('fine_tuned_models',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('adapter_id', sa.String(length=255), nullable=False),
    sa.Column('job_name', sa.String(length=255), nullable=False),
    sa.Column('base_model_name', sa.String(length=255), nullable=False),
    sa.Column('adapter_path', sa.String(length=512), nullable=False),
    sa.Column('training_dataset_id', sa.String(length=512), nullable=True),
    sa.Column('training_status', sa.Enum('pending', 'running', 'completed', 'failed', 'paused', name='fine_tuning_status_enum'), nullable=False),
    sa.Column('training_logs_path', sa.String(length=512), nullable=True),
    sa.Column('hyperparameters', sa.JSON(), nullable=True),
    sa.Column('final_loss', sa.Float(), nullable=True),
    sa.Column('validation_loss', sa.Float(), nullable=True),
    sa.Column('gpu_hours_consumed', sa.Float(), nullable=True),
    sa.Column('estimated_training_cost_usd', sa.Float(), nullable=True),
    sa.Column('created_by_user_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['created_by_user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('fine_tuned_models', schema=None) as batch_op:
        batch_op.create_index('fine_tuned_models_base_model_idx', ['base_model_name'], unique=False)
        batch_op.create_index('fine_tuned_models_status_idx', ['training_status'], unique=False)
        batch_op.create_index(batch_op.f('ix_fine_tuned_models_adapter_id'), ['adapter_id'], unique=True)
        batch_op.create_index(batch_op.f('ix_fine_tuned_models_created_by_user_id'), ['created_by_user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_fine_tuned_models_job_name'), ['job_name'], unique=False)

    op.drop_table('celery_crontabschedule')
    op.drop_table('celery_solarschedule')
    op.drop_table('celery_intervalschedule')
    op.drop_table('celery_periodictaskchanged')
    op.drop_table('celery_clockedschedule')
    op.drop_table('celery_periodictask')
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('celery_periodictask',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('name', sa.VARCHAR(length=255), nullable=False),
    sa.Column('task', sa.VARCHAR(length=255), nullable=False),
    sa.Column('args', sa.TEXT(), nullable=False),
    sa.Column('kwargs', sa.TEXT(), nullable=False),
    sa.Column('queue', sa.VARCHAR(length=255), nullable=True),
    sa.Column('exchange', sa.VARCHAR(length=255), nullable=True),
    sa.Column('routing_key', sa.VARCHAR(length=255), nullable=True),
    sa.Column('headers', sa.TEXT(), nullable=True),
    sa.Column('priority', sa.INTEGER(), nullable=True),
    sa.Column('expires', sa.DATETIME(), nullable=True),
    sa.Column('expire_seconds', sa.INTEGER(), nullable=True),
    sa.Column('one_off', sa.BOOLEAN(), nullable=False),
    sa.Column('start_time', sa.DATETIME(), nullable=True),
    sa.Column('enabled', sa.BOOLEAN(), nullable=False),
    sa.Column('last_run_at', sa.DATETIME(), nullable=True),
    sa.Column('total_run_count', sa.INTEGER(), nullable=False),
    sa.Column('date_changed', sa.DATETIME(), nullable=True),
    sa.Column('description', sa.TEXT(), nullable=True),
    sa.Column('discriminator', sa.VARCHAR(length=20), nullable=False),
    sa.Column('schedule_id', sa.INTEGER(), nullable=False),
    sa.CheckConstraint('priority BETWEEN 0 AND 255'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name')
    )
    op.create_table('celery_clockedschedule',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('clocked_time', sa.DATETIME(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('celery_periodictaskchanged',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('last_update', sa.DATETIME(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('celery_intervalschedule',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('every', sa.INTEGER(), nullable=False),
    sa.Column('period', sa.VARCHAR(length=12), nullable=False),
    sa.CheckConstraint('every >= 1'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('celery_solarschedule',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('event', sa.VARCHAR(length=17), nullable=False),
    sa.Column('latitude', sa.NUMERIC(precision=9, scale=6), nullable=False),
    sa.Column('longitude', sa.NUMERIC(precision=9, scale=6), nullable=False),
    sa.CheckConstraint('latitude BETWEEN -90 AND 90'),
    sa.CheckConstraint('longitude BETWEEN -180 AND 180'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('event', 'latitude', 'longitude')
    )
    op.create_table('celery_crontabschedule',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('minute', sa.VARCHAR(length=240), nullable=False),
    sa.Column('hour', sa.VARCHAR(length=96), nullable=False),
    sa.Column('day_of_week', sa.VARCHAR(length=64), nullable=False),
    sa.Column('day_of_month', sa.VARCHAR(length=124), nullable=False),
    sa.Column('month_of_year', sa.VARCHAR(length=64), nullable=False),
    sa.Column('timezone', sa.VARCHAR(length=64), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('fine_tuned_models', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_fine_tuned_models_job_name'))
        batch_op.drop_index(batch_op.f('ix_fine_tuned_models_created_by_user_id'))
        batch_op.drop_index(batch_op.f('ix_fine_tuned_models_adapter_id'))
        batch_op.drop_index('fine_tuned_models_status_idx')
        batch_op.drop_index('fine_tuned_models_base_model_idx')

    op.drop_table('fine_tuned_models')
    # ### end Alembic commands ###
