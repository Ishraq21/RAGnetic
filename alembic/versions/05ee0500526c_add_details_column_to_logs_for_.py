"""Add details column to logs for structured metrics

Revision ID: 05ee0500526c
Revises: 1ad16942cea4
Create Date: 2025-07-18 20:16:36.730299

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import sqlite

# revision identifiers, used by Alembic.
revision: str = '05ee0500526c'
down_revision: Union[str, Sequence[str], None] = '1ad16942cea4'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('step_executions')
    with op.batch_alter_table('agent_traces', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_agent_traces_agent_name'))

    op.drop_table('agent_traces')
    with op.batch_alter_table('ragnetic_logs', schema=None) as batch_op:
        batch_op.add_column(sa.Column('details', sa.JSON(), nullable=True))

    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('ragnetic_logs', schema=None) as batch_op:
        batch_op.drop_column('details')

    op.create_table('agent_traces',
    sa.Column('id', sa.VARCHAR(), nullable=False),
    sa.Column('agent_name', sa.VARCHAR(), nullable=False),
    sa.Column('start_time', sa.DATETIME(), nullable=True),
    sa.Column('end_time', sa.DATETIME(), nullable=True),
    sa.Column('status', sa.VARCHAR(), nullable=False),
    sa.Column('trigger_event', sqlite.JSON(), nullable=True),
    sa.Column('total_duration_s', sa.FLOAT(), nullable=True),
    sa.Column('retrieval_time_s', sa.FLOAT(), nullable=True),
    sa.Column('generation_time_s', sa.FLOAT(), nullable=True),
    sa.Column('prompt_tokens', sa.INTEGER(), nullable=True),
    sa.Column('completion_tokens', sa.INTEGER(), nullable=True),
    sa.Column('total_tokens', sa.INTEGER(), nullable=True),
    sa.Column('estimated_cost_usd', sa.FLOAT(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('agent_traces', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_agent_traces_agent_name'), ['agent_name'], unique=False)

    op.create_table('step_executions',
    sa.Column('id', sa.INTEGER(), nullable=False),
    sa.Column('trace_id', sa.VARCHAR(), nullable=True),
    sa.Column('step_name', sa.VARCHAR(), nullable=False),
    sa.Column('start_time', sa.DATETIME(), nullable=True),
    sa.Column('end_time', sa.DATETIME(), nullable=True),
    sa.Column('status', sa.VARCHAR(), nullable=False),
    sa.Column('inputs', sqlite.JSON(), nullable=True),
    sa.Column('outputs', sa.TEXT(), nullable=True),
    sa.ForeignKeyConstraint(['trace_id'], ['agent_traces.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###
